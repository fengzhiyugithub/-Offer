[题目链接](https://www.nowcoder.com/practice/ff05d44dfdb04e1d83bdbdab320efbcb?tpId=13&tqId=11211&tPage=3&rp=1&ru=%2Fta%2Fcoding-interviews&qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking)

## 题目描述

请实现一个函数，用来判断一颗二叉树是不是对称的。注意，如果一个二叉树同此二叉树的镜像是同样的，定义其为对称的。

思路：判断二叉树是否对称，也就是**比较左右子树是否对称**，那么**递归**比较左右子树即可。

代码：

```cpp
/*
struct TreeNode {
    int val;
    struct TreeNode *left;
    struct TreeNode *right;
    TreeNode(int x) :
            val(x), left(NULL), right(NULL) {
    }
};
*/
class Solution {
public:
    bool isSymmetrical(TreeNode* pRoot) {
        return isSymmetrical(pRoot,pRoot);
    }

    bool isSymmetrical(TreeNode* pRoot1,TreeNode* pRoot2) {
        if(pRoot1 == nullptr && pRoot2 == nullptr) {
            return true;
        }
        if(pRoot1 == nullptr || pRoot2 == nullptr || pRoot1 -> val != pRoot2 -> val) {
            return false;
        }
        return isSymmetrical(pRoot1->left,pRoot2->right) && isSymmetrical(pRoot2->right,pRoot1->left);
    }

};
```