[题目链接](https://www.nowcoder.com/practice/d77d11405cc7470d82554cb392585106?tpId=13&tqId=11174&tPage=2&rp=2&ru=%2Fta%2Fcoding-interviews&qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking)

## 题目描述

输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否可能为该栈的弹出顺序。假设压入栈的所有数字均不相等。例如序列1,2,3,4,5是某栈的压入顺序，序列4,5,3,2,1是该压栈序列对应的一个弹出序列，但4,3,5,1,2就不可能是该压栈序列的弹出序列。（注意：这两个序列的长度是相等的）

分析：出栈的序列 **不可能出现 “大小中”**的三个连续的数，以此判断。 注意特判是否序列中少于3个数和两个序列中的数存在不相等的

```
class Solution {
public:
    bool IsPopOrder(vector<int> pushV,vector<int> popV) {
        int len=pushV.size();
        vector<int>tmp1,tmp2;
        tmp1=pushV,tmp2=popV;
        sort(tmp1.begin(),tmp1.end());
        sort(tmp2.begin(),tmp2.end());
        for(int i=0; i<len; i++) {
            if(tmp1[i]!=tmp2[i]) {
                return false;
            }
        }
        if(len<=2) {
            return true;
        }
        for(int i=1; i<len-1; i++) {
            if(popV[i]<popV[i+1]&&popV[i]<popV[i-1]&&popV[i-1]>popV[i+1]) {
                return false;
            }
        }
        return true;
    }
};
```